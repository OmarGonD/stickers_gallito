from django.http import HttpResponsefrom django.shortcuts import render, redirect, get_object_or_404from shop.models import Product, Category, Perufrom .models import Cart, CartItem, SampleItemfrom django.core.exceptions import ObjectDoesNotExistimport stripefrom django.conf import settingsfrom order.models import Order, OrderItemfrom marketing.models import used_cuponsimport uuidimport culqipyfrom django.views.decorators.csrf import csrf_exemptimport datetimefrom django.template.loader import get_templatefrom django.core.mail import EmailMessagefrom marketing.models import Cupons# Create your views here.def full_remove(request, cart_item_id):    cart_item = CartItem.objects.get(id=cart_item_id)    cart_item.delete()    return redirect('carrito_de_compras:cart_detail')def full_remove_sample(request, sample_item_id):    sample_item = SampleItem.objects.get(id=sample_item_id)    sample_item.delete()    return redirect('carrito_de_compras:cart_detail')### CULQI PAYMENT ###@csrf_exemptdef cart_charge_credit_card(request):    print("CART_CHARGE_CREDIT_CARD VIEW")    if request.POST.get('payment_method') == 'credit_card_payment':        print("CART CHARGEEEE!!!")        culqipy.public_key = settings.CULQI_PUBLISHABLE_KEY        culqipy.secret_key = settings.CULQI_SECRET_KEY        print("This is request POST:")        print(request.POST)        print("This is the AJAX PART")        amount = request.POST.get('amount')        currency_code = request.POST.get('currency_code')        email = request.POST.get('email')        source_id = request.POST.get('source_id')        last_four = request.POST.get('last_four')        shipping_address = request.POST.get('shipping_address')        shipping_cost = request.POST.get('shipping_cost')        print("Amount from AJAX (POST):" + str(amount))        print("Currency Code from AJAX (POST):" + str(currency_code))        print("Email: " + str(email))        print("Source_ID: " + str(source_id))        print("Shipping Address: " + str(shipping_address))        print("---------")        dir_charge = {"amount": int(amount), "currency_code": currency_code,                      "email": email,                      "source_id": source_id}        print(dir_charge)        charge = culqipy.Charge.create(dir_charge)        if not charge:            print("No se generó CHARGE")        print("Charge: ")        print(charge)        print("Charge ID: ")        print(charge['id'])        print(charge['amount'])        print("New PRINTS")        print("User Email")        print(request.user.email)        print("User Department")        print(request.user.profile.shipping_department)        print("User Province")        print(request.user.profile.shipping_province)        print("User District")        print(request.user.profile.shipping_district)        transaction_amount = int(charge['amount']) / 100  # Necesario dividir entre 100 para obtener el monto real,        # Esto debido a cómo Culqi recibe los datos de los pagos        first_name = request.user.first_name        last_name = request.user.last_name        phone_number = request.user.profile.phone_number        current_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')        shipping_address1 = request.user.profile.shipping_address1        reference = request.user.profile.reference        shipping_department = request.user.profile.shipping_department        shipping_province = request.user.profile.shipping_province        shipping_district = request.user.profile.shipping_district        order_details = Order.objects.create(            token=charge['id'],            first_name=first_name,            last_name=last_name,            phone_number=phone_number,            email=email,  # Using email entered in Culqi module, NOT user.email. Could be diff.            total=transaction_amount,            shipping_cost=shipping_cost,            last_four=last_four,            created=current_time,            shipping_address=shipping_address,            shipping_address1=shipping_address1,            reference=reference,            shipping_department=shipping_department,            shipping_province=shipping_province,            shipping_district=shipping_district,            status='recibido_pagado'        )        order_details.save()        print("La orden fue creada")        try:            print("CREANDO LOS ORDERITEMS")            cart_id = int(request.COOKIES.get("cart_id"))            print("########################")            print("El Cart_ID es: ", cart_id)            print(type(cart_id))            print("########################")            # try:            #     cart = Cart.objects.get(cart_id =cart_id)            # except cart.DoesNotExist:            #     print("No se puedo encontrar el carrito")            try:                cart = Cart.objects.get(id=cart_id)                print("########################")                print("Se obtuvo CART")                print("########################")            except Cart.DoesNotExist:                print("########################")                print("CART No se puedo obtener")                print("########################")            cart_items = CartItem.objects.filter(cart=cart)            for order_item in cart_items:                print("Order_ITEM: ", order_item)                oi = OrderItem.objects.create(                    order=order_details,                    product=order_item.product.name,                    quantity=order_item.quantity,                    size=order_item.size,                    price=order_item.product.price,                    file=order_item.file,                    comment=order_item.comment,                )                try:                    oi.save()                except oi.DoesNotExist:                    print("No se creo el Order ITEM")                # order_item.delete()                # print("Se guardó el item de la compra")            ### Sample ITEMS SAVE            sample_items = SampleItem.objects.filter(cart=cart)            for order_item in sample_items:                print("Order_ITEM: ", order_item)                oi = OrderItem.objects.create(                    order=order_details,                    product=order_item.sample.name,                    quantity=order_item.quantity,                    size=order_item.size,                    price=order_item.sample.price,                    file=order_item.file,                    comment=order_item.comment,                )                try:                    oi.save()                except oi.DoesNotExist:                    print("No se creo el Order ITEM")                # order_item.delete()                # print("Se guardó el item de la compra")        except ObjectDoesNotExist:            pass        try:            '''Calling send_email function'''            send_email_credit_card(order_details.id)            print("El correo de confirmación por la compra ha sido enviado al cliente")        except IOError as e:            return e        try:            cupon_name = request.COOKIES.get("cupon")            cupon = Cupons.objects.get(cupon=cupon_name)            cupon.quantity = cupon.quantity - 1            cupon.save()            used_cupon = used_cupons.objects.create(                cupon=cupon_name,                user=request.user.username,                order=order_details.id            )            used_cupon.save()        except:            print("No se detectó cupón o no se pudo guardar cupón usado")            pass        response = HttpResponse("Hi")        response.delete_cookie("cart_id")        response.delete_cookie("cupon")        return response@csrf_exemptdef cart_charge_deposit_payment(request):    # Pago con Efectivo    print("PAGO CON EFECTIVO - DATOS")    amount = request.POST.get('amount')    email = request.user.email    shipping_address = request.POST.get('shipping_address')    shipping_cost = request.POST.get('shipping_cost')    last_four = 1111  # No necesario para Pagos con Efectivo, pero si para el Objeto Order    transaction_amount = amount  # Solo para Culqi se divide entre 100    first_name = request.user.first_name    last_name = request.user.last_name    current_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')    shipping_address1 = request.user.profile.shipping_address1    reference = request.user.profile.reference    shipping_department = request.user.profile.shipping_department    shipping_province = request.user.profile.shipping_province    shipping_district = request.user.profile.shipping_district    order_details = Order.objects.create(        token='Random',        first_name=first_name,        last_name=last_name,        email=email,  # Using email entered in Culqi module, NOT user.email. Could be diff.        total=transaction_amount,        shipping_cost=shipping_cost,        last_four=last_four,        created=current_time,        shipping_address=shipping_address,        shipping_address1=shipping_address1,        reference=reference,        shipping_department=shipping_department,        shipping_province=shipping_province,        shipping_district=shipping_district,        status='recibido_no_pagado'    )    order_details.save()    print("La orden fue creada")    try:        print("CREANDO LOS ORDERITEMS")        cart_id = int(request.COOKIES.get("cart_id"))        print("########################")        print("El Cart_ID es: ", cart_id)        print(type(cart_id))        print("########################")        # try:        #     cart = Cart.objects.get(cart_id =cart_id)        # except cart.DoesNotExist:        #     print("No se puedo encontrar el carrito")        try:            cart = Cart.objects.get(id=cart_id)            print("########################")            print("Se obtuvo CART")            print("########################")        except Cart.DoesNotExist:            print("########################")            print("CART No se puedo obtener")            print("########################")        cart_items = CartItem.objects.filter(cart=cart)        for order_item in cart_items:            print("Order_ITEM: ", order_item)            oi = OrderItem.objects.create(                order=order_details,                product=order_item.product.name,                quantity=order_item.quantity,                size=order_item.size,                price=order_item.sub_total(),                file=order_item.file,                comment=order_item.comment,            )            try:                oi.save()            except oi.DoesNotExist:                print("No se creo el Order ITEM")                # order_item.delete()                # print("Se guardó el item de la compra")        ### Sample ITEMS SAVE        sample_items = SampleItem.objects.filter(cart=cart)        for order_item in sample_items:            print("Order_ITEM: ", order_item)            oi = OrderItem.objects.create(                order=order_details,                product=order_item.sample.name,                quantity=order_item.quantity,                size=order_item.size,                price=order_item.sub_total(),                file=order_item.file,                comment=order_item.comment,            )            try:                oi.save()            except oi.DoesNotExist:                print("No se creo el Order ITEM")            # order_item.delete()            # print("Se guardó el item de la compra")        try:            '''Calling send_email function'''            send_email_deposit_payment(order_details.id)            print("El correo de confirmación por la compra ha sido enviado al cliente")        except IOError as e:            return e        try:            cupon_name = request.COOKIES.get("cupon")            cupon = Cupons.objects.get(cupon=cupon_name)            cupon.quantity = cupon.quantity - 1            cupon.save()            used_cupon = used_cupons.objects.create(                cupon=cupon_name,                user=request.user.username,                order=order_details.id            )            used_cupon.save()        except:            print("No se detectó cupón o no se pudo guardar cupón usado")            pass    except ObjectDoesNotExist:        pass    response = HttpResponse("Hi")    response.delete_cookie("cart_id")    response.delete_cookie("cupon")    return response##############################################################################################def cart_detail(request, total=0, counter=0, cart_items=None):    try:        cart = Cart.objects.get(id=request.COOKIES.get("cart_id"))        cart_items = CartItem.objects.filter(cart=cart)        for cart_item in cart_items:            total += int(cart_item.sub_total())        sample_items = SampleItem.objects.filter(cart=cart)        for sample_item in sample_items:            total += int(sample_item.sub_total())        categories = Category.objects.exclude(name='Muestras')        print("Total: ", total)        ### Calcular costo despacho ###        try:            costo_despacho = Peru.objects.filter(departamento=request.user.profile.shipping_department,                                                 provincia=request.user.profile.shipping_province,                                                 distrito=request.user.profile.shipping_district).values_list(                "costo_despacho_con_recojo", flat=True)[0]        except:            costo_despacho = 15            ### ¿tiene un cupón de descuento? ###            # cupon_used_by_user = used_cupons.objects.filter(user = request.user.username)        try:            cupon = Cupons.objects.get(cupon=request.COOKIES.get("cupon"))        except:            pass        try:            if cupon.hard_discount:                descuento = int(cupon.hard_discount)            elif cupon.percentage:                print("Inicia: percentage_discount if condition")                print("%: ", type(cupon.percentage))                descuento = int(int(total) * int(cupon.percentage) / int(100))            else:                descuento = 0        except:            descuento = 0        print("Descuento ", descuento)        print("Total  2 ", total)        print("Costo despacho ", costo_despacho)        total_a_pagar = int(total) - int(descuento) + costo_despacho        print("Total a pagar ", total_a_pagar)        culqi_my_public_key = settings.CULQI_PUBLISHABLE_KEY  # Es necesario mandar la llave pública para generar un token        culqi_total = int(total_a_pagar * 100)  # El total para cualqui debe multiplicarse por 100        print("total: ", total)        print("descuento: ", descuento)        print("costo de envío: ", costo_despacho)        print("total a pagar: ", total_a_pagar)        print("### CART_ITEMS LEN###")        print(len(cart_items))        print(len(sample_items))        return render(request, 'cart.html',                      dict(cart_items=cart_items, sample_items=sample_items, total=total, counter=counter,                           culqi_total=culqi_total, culqi_my_public_key=culqi_my_public_key,                           categories=categories, total_a_pagar=total_a_pagar, descuento=descuento,                           costo_despacho=costo_despacho))    except:        categories = Category.objects.exclude(name='Muestras')        return render(request, 'cart.html', {'categories': categories})def send_email_credit_card(order_id):    transaction = Order.objects.get(id=order_id)    order_items = OrderItem.objects.filter(order=transaction)    try:        '''sending the order to the customer'''        subject = 'Stickers Gallito Perú - Nueva orden #{}'.format(transaction.id)        to = ['{}'.format(transaction.email), 'stickersgallito@gmail.com', 'oma.gonzales@gmail.com']        from_email = 'stickersgallito@stickersgallito.pe'        order_information = {            'transaction': transaction,            'order_items': order_items        }        message = get_template('email/email_credit_card.html').render(order_information)        msg = EmailMessage(subject, message, to=to, from_email=from_email)        msg.content_subtype = 'html'        msg.send()    except IOError as e:        return edef send_email_deposit_payment(order_id):    transaction = Order.objects.get(id=order_id)    order_items = OrderItem.objects.filter(order=transaction)    try:        '''sending the order to the customer'''        subject = 'Stickers Gallito Perú - Nueva orden #{}'.format(transaction.id)        to = ['{}'.format(transaction.email), 'stickersgallito@gmail.com', 'oma.gonzales@gmail.com']        from_email = 'stickersgallito@stickersgallito.pe'        order_information = {            'transaction': transaction,            'order_items': order_items        }        message = get_template('email/email_deposit_payment.html').render(order_information)        msg = EmailMessage(subject, message, to=to, from_email=from_email)        msg.content_subtype = 'html'        msg.send()    except IOError as e:        return e